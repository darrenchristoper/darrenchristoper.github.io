import {
  require_react_dom
} from "./chunk-HQEHZBVF.js";
import "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@astrojs/react/dist/index.js
var import_react_dom = __toESM(require_react_dom());
function getRenderer() {
  return {
    name: "@astrojs/react",
    clientEntrypoint: import_react_dom.version.startsWith("18.") ? "@astrojs/react/client.js" : "@astrojs/react/client-v17.js",
    serverEntrypoint: import_react_dom.version.startsWith("18.") ? "@astrojs/react/server.js" : "@astrojs/react/server-v17.js",
    jsxImportSource: "react",
    jsxTransformOptions: async () => {
      var _a;
      const babelPluginTransformReactJsxModule = await import("./lib-L24JPZPA.js");
      const jsx = ((_a = babelPluginTransformReactJsxModule == null ? void 0 : babelPluginTransformReactJsxModule.default) == null ? void 0 : _a.default) ?? (babelPluginTransformReactJsxModule == null ? void 0 : babelPluginTransformReactJsxModule.default);
      return {
        plugins: [
          jsx(
            {},
            {
              runtime: "automatic",
              // This option tells the JSX transform how to construct the "*/jsx-runtime" import.
              // In React v17, we had to shim this due to an export map issue in React.
              // In React v18, this issue was fixed and we can import "react/jsx-runtime" directly.
              // See `./jsx-runtime.js` for more details.
              importSource: import_react_dom.version.startsWith("18.") ? "react" : "@astrojs/react"
            }
          )
        ]
      };
    }
  };
}
function getViteConfiguration() {
  return {
    optimizeDeps: {
      include: [
        import_react_dom.version.startsWith("18.") ? "@astrojs/react/client.js" : "@astrojs/react/client-v17.js",
        "react",
        "react/jsx-runtime",
        "react/jsx-dev-runtime",
        "react-dom"
      ],
      exclude: [
        import_react_dom.version.startsWith("18.") ? "@astrojs/react/server.js" : "@astrojs/react/server-v17.js"
      ]
    },
    resolve: {
      dedupe: ["react", "react-dom"]
    },
    ssr: {
      external: import_react_dom.version.startsWith("18.") ? ["react-dom/server", "react-dom/client"] : ["react-dom/server.js", "react-dom/client.js"],
      noExternal: [
        // These are all needed to get mui to work.
        "@mui/material",
        "@mui/base",
        "@babel/runtime",
        "redoc",
        "use-immer"
      ]
    }
  };
}
function src_default() {
  return {
    name: "@astrojs/react",
    hooks: {
      "astro:config:setup": ({ addRenderer, updateConfig }) => {
        addRenderer(getRenderer());
        updateConfig({ vite: getViteConfiguration() });
      }
    }
  };
}
export {
  src_default as default
};
//# sourceMappingURL=@astrojs_react.js.map
